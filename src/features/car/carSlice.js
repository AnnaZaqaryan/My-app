import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fethAllCountry, fethAllMakes } from '../crawlerParams/filterApiValues';
import { deletCarsApi, exportDataApi, fethAllCars } from './carApi';



const initialState = {
  page : {
    websites :[],
    total : 0
  },

  filterParams : {
    currentPage : 0,
    make : '',
    country: '',
    foundKey : '',
    isQualified : true,
    sort : {
      field : "id",
      dir : "desc"
    },
    
  },

  carIdsToDelate : [],
  allMakeValues : [],
  allCountryValues : []

};

export const getAllMakes = createAsyncThunk(
  'car/getAllMakes',
  async () => {
    const response = await fethAllMakes()
    return response;
  }
);

export const getAllCountry = createAsyncThunk(
  'car/getAllCountry',
  async () => {
    const response = await fethAllCountry()
    return response;
  }
);

export const exportData = createAsyncThunk(
  'car/exportData',
  async (arg, { getState }) => {
    const state = getState();
    const response = await exportDataApi(state.car.filterParams)
    return response;
  }
);


export const getAllCars = createAsyncThunk(
  'car/getCars',
  async ( arg, { getState }) => {
    const state = getState();
    const response = await fethAllCars(state.car.filterParams)
    
    return response;
  }
);

export const deleteCars = createAsyncThunk(
 'car/deletCars',
 async ( ids, { getState, dispatch}) => {

  const state = getState();
    const response = await deletCarsApi(state.car.carIdsToDelate);
    dispatch(getAllCars())
    return response;
  }
);


export const carSlice = createSlice({
  name: 'car',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

    changePage: (state, action ) => {
      state.filterParams.currentPage  = action.payload;
      
      action.asyncDispatch(getAllCars());
    },

    changeMake : (state, action) => {
      state.filterParams.make  = action.payload;
      action.asyncDispatch(getAllCars());
    },

    changeCountry : (state, action) => {
      state.filterParams.country  = action.payload;
      action.asyncDispatch(getAllCars());
    },

    changeFoundKey : (state, action) => {
      state.filterParams.foundKey  = action.payload;
      action.asyncDispatch(getAllCars());
    },

    changeSort : (state, action) => {
      state.filterParams.sort  = action.payload;
      action.asyncDispatch(getAllCars());
    },

    changeIsQualified: (state, action) => {
      state.filterParams.isQualified  = action.payload;
      action.asyncDispatch(getAllCars());
    },

    addDelateId: (state, action) => {
      state.carIdsToDelate.push(action.payload);
      
    },

    removeDelatedId: (state, action) =>{
      state.carIdsToDelate =  state.carIdsToDelate.filter(e => e != action.payload);
    }

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllCars.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getAllCars.fulfilled, (state, action) => {
       
        
        state.page  = action.payload;
      })
      .addCase(getAllMakes.fulfilled, (state, action) => {
        state.allMakeValues  = action.payload;
      })

      .addCase(getAllCountry.fulfilled, (state, action) => {
        state.allCountryValues  = action.payload;
      })
     
      ;
  },
});

export const { changePage,changeMake, changeFoundKey, changeCountry, incrementByAmount, changeSort , changeIsQualified, addDelateId, removeDelatedId} = carSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCarPage = (state) => state.car.page;
export const selectFilterParam = (state) => state.car.filterParams;
export const selectAllMakeFilterValues = (state) => state.car.allMakeValues;
export const selectAllCountryValues = (state) => state.car.allCountryValues;





export default carSlice.reducer;
