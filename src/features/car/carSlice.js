import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fethAllCars } from './carApi';
import { fethAllMakes } from './filterApiValues';


const initialState = {
  page : {
    listings :[],
    total : 0
  },

  makeValues : [],

  filterParams : {
    currentPage : 0,
    make : ''
  }
};



export const getAllCars = createAsyncThunk(
  'car/getCars',
  async ( arg, { getState }) => {
    const state = getState();
    const response = await fethAllCars(state.car.filterParams)
    
    return response;
  }
);

export const getAllMakes = createAsyncThunk(
  'car/getAllMakes',
  async () => {
    const response = await fethAllMakes()
    return response;
  }
);

export const carSlice = createSlice({
  name: 'car',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

    changePage: (state, action ) => {
      state.filterParams.currentPage  = action.payload;
      
      action.asyncDispatch(getAllCars());
    },

    changeMake : (state, action) => {
      state.filterParams.make  = action.payload;
      action.asyncDispatch(getAllCars());
    }

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllCars.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getAllCars.fulfilled, (state, action) => {
       
        
        state.page  = action.payload;
      })

      .addCase(getAllMakes.fulfilled, (state, action) => {
        state.makeValues  = action.payload;
      })
      ;
  },
});

export const { changePage,changeMake, incrementByAmount } = carSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCarPage = (state) => state.car.page;
export const selectFilterParam = (state) => state.car.filterParams;
export const selectMakeValues = (state) => state.car.makeValues;



export default carSlice.reducer;
